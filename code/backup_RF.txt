setwd("/home/student/Desktop/vittoria")

library(randomForest)
library(glmnet)
library(corto)

correlation <- function(real, pred, thr){
  cors_spearman <- c()
  cors_pearson <- c()
  significant <- c()
  for(i in rownames(real)){
    cors_spearman <- c(cors_spearman,cor(real[i,],pred[i,],method="spearman"))
    cors_pearson <- c(cors_pearson,cor(real[i,],pred[i,],method="pearson"))
    
    # Do you want to apply the thershold on spearman, pearson or both ?
    if(cors_spearman[length(cors_spearman)] > thr){
      significant <- c(significant, i)
    }
    #if(cors_pearson[length(cors_pearson)] > thr){
    #  significat <- c(significant, i)
    #}
    #if(cors_spearman[length(cors_spearman)] > thr && cors_pearson[length(cors_pearson)] > thr){
    #  significat <- c(significant, i)
    #}
  }
  
  return(list(cors_spearman, cors_pearson, significant))
  
}

settings <- function(genes1, genes2, metab1, metab2){
  settings <- list()
  settings$com_met <- intersect(rownames(metab1), rownames(metab2))
  com_genes <- intersenct(rownames(genes1), rownames(genes2))
  predictors <- apply(genes1[com_genes,],1,var)
  predictors <- names(sort(predictors,dec=TRUE))[1:1000]
  
  settings$preds <- predictors
  settings$new_genes1 <- genes1[predictors,]
  
  temp_new_genes1 <- rownames(settings$new_genes1) 
  temp_new_genes1 <- gsub("-", "_", temp_new_genes1) 
  rownames(settings$new_genes1) <- temp_new_genes1
  
  settings$new_genes2 <- genes2[predictors,]
  temp_new_genes2 <- rownames(settings$new_genes2) 
  temp_new_genes2 <- gsub("-", "_", temp_new_genes2) 
  rownames(settings$new_genes2) <- temp_new_genes2
  
  return(settings)
}

train_pred <- function(common_met, met1, gene1, genes2){
  pred_mat <- c()
  pb = txtProgressBar(min = 0, max = length(common_met), initial = 0, style = 3)
  for(met in common_met){
    Tmet1 <- t(met1)
    Tgenes1 <- t(genes1)
    metabolite <- Tmet1[,met]
    
    # create a temporary variable which stores the response and the significant predictors only
    current <- cbind(metabolite, Tgenes1)
    
    # Train the random forest
    rf <- randomForest(metabolite ~ ., data = current, ntree = 10)
    #print(rf)
    #plot(rf)
    
    # Predict
    pred <- predict(rf, t(genes2))
    
    # Fill the prediction matrix
    if(length(pred_mat) == 0){
      pred_mat <- pred
    }else{
      pred_mat <- rbind(pred_mat, pred)
    }
    setTxtProgressBar(pb,match(met,common_met))
  }
  close(pb)
  rownames(pred_mat) <- common_met
  return(pred_mat)
}



#Loading CCLE data: I'll always use CCLE data set to train my predictive tool
load("data/final_ds/genes_ccle.rda")
load("data/final_ds/metab_ccle.rda")

# NCI60 ####

load("data/final_ds/genes_NCI60.rda")
load("data/final_ds/metab_NCI60.rda")


settings <- settings(genes_ccle, genes_NCI60, metab_ccle, metab_NCI60)
common_met_NCI60_ccle <- settings$com_met
rf_genes_ccle <- settings$new_genes1
rf_gene_NCI60 <- settings$new_genes2
#predictors <- settings$preds

pred_NCI60 <- train_pred(common_met_NCI60_ccle, metab_ccle, rf_genes_ccle, rf_gene_NCI60)



# First I need to select common metabolites and common genes between CCLE(train) and NCI60 (test)
#  because this tool must have exactly same predictors as input of the testing dataset
# I also select common metabolites otherwise later I would have to do unnecessary and computationally expensive work
common_met_NCI60_ccle <- intersect(rownames(metab_ccle), rownames(metab_NCI60))

common_genes_NCI60_ccle <- intersect(rownames(genes_ccle), rownames(genes_NCI60))

# Feature reduction based on first 1000 genes with highest variance 
vars<-apply(genes_ccle[common_genes_NCI60_ccle,],1,var)
vars<-names(sort(vars,dec=TRUE))[1:1000]

metab_ccle_inv <- t(metab_ccle)
genes_ccle_inv <- t(genes_ccle[vars,])
temp_genes_ccle_inv <- colnames(genes_ccle_inv) 
temp_genes_ccle_inv <- gsub("-", "_", temp_genes_ccle_inv) 
colnames(genes_ccle_inv) <- temp_genes_ccle_inv

new_genes_NCI60 <- genes_NCI60[vars,]
temp_new_genes_NCI60 <- rownames(new_genes_NCI60) 
temp_new_genes_NCI60 <- gsub("-", "_", temp_new_genes_NCI60) 
rownames(new_genes_NCI60) <- temp_new_genes_NCI60

pred_rf_mat_NCI60 <- c()
pb = txtProgressBar(min = 0, max = length(common_met_NCI60_ccle), initial = 0, style = 3) 
for(i in common_met_NCI60_ccle){
  
  metabolite <- metab_ccle_inv[,i]

  # create a temporary variable which stores the response and the significant predictors only
  current<- cbind(metabolite, genes_ccle_inv)
  rf <-randomForest(metabolite~.,data=current, ntree=1000) 
  #print(rf)
  #plot(rf)
  
  pred_rf <- predict(rf, t(new_genes_NCI60))
  
  if(length(pred_rf_mat_NCI60) == 0){
    pred_rf_mat_NCI60 <- pred_rf
  }else{
    pred_rf_mat_NCI60 <- rbind(pred_rf_mat_NCI60, pred_rf)
  }
  setTxtProgressBar(pb,match(i,common_met_NCI60_ccle))
}
close(pb)
rownames(pred_rf_mat_NCI60) <- common_met_NCI60_ccle
save(pred_rf_mat_NCI60, file="data/final_ds/rf/pred_rf_mat_NCI60.rda")
load("data/final_ds/rf/pred_rf_mat_NCI60.rda")

cc_thr <- 0.3
corr_outputs_NCI60 <- correlation(metab_NCI60[common_met_NCI60_ccle,], pred_rf_mat_NCI60[common_met_NCI60_ccle,], cc_thr)
cors_NCI60_spearman <- corr_outputs_NCI60[[1]]
cors_NCI60_pearson <- corr_outputs_NCI60[[2]]

names(cors_NCI60_spearman) <- common_met_NCI60_ccle
names(cors_NCI60_pearson) <- common_met_NCI60_ccle

significant_NCI60 <- corr_outputs_NCI60[[3]]

length(significant_NCI60) # 0/35 are significant

# Saving with different names to better manage the step in which I will compare the correlations performances of 
#  differnet tools
NCI60_sp_rf <- cors_NCI60_spearman
NCI60_pe_rf <- cors_NCI60_pearson

save(NCI60_sp_rf, file = "data/final_ds/corr/NCI60_sp_rf.rda")
save(NCI60_pe_rf, file = "data/final_ds/corr/NCI60_pe_rf.rda")


# Testing how much dist is diff from zero
shapiro.test(cors_NCI60_spearman) #p-value = 0.005873 --> cannot use t-test
shapiro.test(cors_NCI60_pearson) #p-value = 0.161 --> can use t-test
t1_NCI60 <- t.test(cors_NCI60_spearman, alternative = "greater") #p-value = 0.015
t2_NCI60 <- t.test(cors_NCI60_pearson, alternative = "greater") # p-value = 0.02245


# For thesis
png(paste0("results/figures/8_rf_pred/correlations_NCI60.png"),w=2900,h=2500,res=600)
plot(density(cors_NCI60_spearman),col="darkgoldenrod3",lwd=3, xlim=c(-1,1), ylim = c(0,3), 
     main = "NCI60 correlations ditribution", xlab = "metabolite CC")
lines(density(cors_NCI60_pearson), col = "brown3", lty = 3, lwd = 2)
abline(v=0,lty=2, col="gray")
mtext(paste0("Spearman p-value = ",round(t1_NCI60$p.value,3),"     Pearson p-value = ",round(t2_NCI60$p.value,3)))
legend("topleft", legend = c("Spearman", "Pearson"), lwd = 2,
       col = c("darkgoldenrod3", "brown3"), lty = c(1,2))
dev.off()

# BREAST ####
load("data/final_ds/genes_breast.rda")
load("data/final_ds/metab_breast.rda")


# store common metabolites and common genes between CCLE and breast
common_met_breast_ccle <- intersect(rownames(metab_ccle), rownames(metab_breast))

common_genes_breast_ccle <- intersect(rownames(genes_ccle), rownames(genes_breast))



# Prediction function needs that the model will have as predictor features (genes) 
#  the same ones that we can find in the next genes dataset upon which we want
#  to perform prediction (so we use just genes which are in common)
new_genes_ccle <- genes_ccle[common_genes_breast_ccle,]

metab_ccle_inv <- t(metab_ccle)
genes_ccle_inv <- t(new_genes_ccle)

pred_rf_mat_breast <- c()
pb = txtProgressBar(min = 0, max = length(common_met_breast_ccle), initial = 0, style = 3) 
for(i in common_met_breast_ccle){
  metabolite <- metab_ccle_inv[,i]
  
  model<-cv.glmnet(genes_ccle_inv,metabolite,alpha=1)
  
  #plot(model)
  
  # Get the best model
  bestcv<-which(model$lambda==model$lambda.min)
  betas<-model$glmnet.fit$beta[,bestcv]
  intercept<-model$glmnet.fit$a0[bestcv]
  sigvars<-names(betas)[betas!=0]
  bestmodel<-betas[sigvars]
  
  # create a temporary variable which stores the response and the significant predictors only for that response
  current<- cbind(metabolite, genes_ccle_inv[,names(bestmodel)])
  
  temp_current <- colnames(current) 
  temp_current <- gsub("-", "_", temp_current) #substituting the space with underscore to remove problems in Cytoscape
  colnames(current) <- temp_current
  
  rf <-randomForest(metabolite~.,data=current, ntree=1000) 
  
  #print(rf)
  #plot(rf)
  new_genes_breast<-genes_breast[names(bestmodel),]
  
  temp_new_genes_breast <- rownames(new_genes_breast) 
  temp_new_genes_breast <- gsub("-", "_", temp_new_genes_breast) 
  rownames(new_genes_breast) <- temp_new_genes_breast
  
  pred_rf <- predict(rf, t(new_genes_breast))
  
  if(length(pred_rf_mat_breast) == 0){
    pred_rf_mat_breast <- pred_rf
  }else{
    pred_rf_mat_breast <- rbind(pred_rf_mat_breast, pred_rf)
  }
  setTxtProgressBar(pb,match(i,common_met_breast_ccle))
}
close(pb)
rownames(pred_rf_mat_breast) <- common_met_breast_ccle
save(pred_rf_mat_breast, file="data/final_ds/rf/pred_rf_mat_breast.rda")
load("data/final_ds/rf/pred_rf_mat_breast.rda")

cc_thr <- 0.3
corr_outputs_breast <- correlation(metab_breast[common_met_breast_ccle,], pred_rf_mat_breast[common_met_breast_ccle,], cc_thr)
cors_breast_spearman <- corr_outputs_breast[[1]]
cors_breast_pearson <- corr_outputs_breast[[2]]

names(cors_breast_spearman) <- common_met_breast_ccle
names(cors_breast_pearson) <- common_met_breast_ccle

significant_breast <- corr_outputs_breast[[3]]

length(significant_breast) # 11/64 are significant

# Saving with different names to better magae the step in which I will compare the correlations performances of 
#  differnet tools
breast_sp_rf <- cors_breast_spearman
breast_pe_rf <- cors_breast_pearson

save(breast_sp_rf, file = "data/final_ds/corr/breast_sp_rf.rda")
save(breast_pe_rf, file = "data/final_ds/corr/breast_pe_rf.rda")


# Testing how much dist is diff from zero
shapiro.test(cors_breast_spearman) #p-value = 0.04309 --> cannot use t-test
shapiro.test(cors_breast_pearson) #p-value = 0.06608 --> can use t-test
t1_breast <- wilcox.test(cors_breast_spearman, alternative = "greater") #p-value = 0.5147
t2_breast <- t.test(cors_breast_pearson, alternative = "greater") # p-value = 0.3126


# For thesis
png(paste0("results/figures/8_rf_pred/correlations_breast.png"),w=2900,h=2500,res=600)
plot(density(cors_breast_spearman),col="darkgoldenrod3",lwd=3, xlim=c(-1,1), ylim = c(0,3), 
     main = "GSE37751 correlations ditribution", xlab = "metabolite CC")
lines(density(cors_breast_pearson), col = "brown3", lty = 3, lwd = 2)
abline(v=0,lty=2, col="gray")
mtext(paste0("Spearman p-value = ",round(t1_breast$p.value,3),"     Pearson p-value = ",round(t2_breast$p.value,3)))
legend("topleft", legend = c("Spearman", "Pearson"), lwd = 2,
       col = c("darkgoldenrod3", "brown3"), lty = c(1,2))
dev.off()

# HASSAN ####

load("data/final_ds/genes_hassan.rda")
load("data/final_ds/metab_hassan.rda")


# store common metabolites and common genes between CCLE and hassan
common_met_hassan_ccle <- intersect(rownames(metab_ccle), rownames(metab_hassan))

common_genes_hassan_ccle <- intersect(rownames(genes_ccle), rownames(genes_hassan))



# Prediction function needs that the model will have as predictor features (genes) 
#  the same ones that we can find in the next genes dataset upon which we want
#  to perform prediction (so we use just genes which are in common)
new_genes_ccle <- genes_ccle[common_genes_hassan_ccle,]

metab_ccle_inv <- t(metab_ccle)
genes_ccle_inv <- t(new_genes_ccle)

pred_rf_mat_hassan <- c()
pb = txtProgressBar(min = 0, max = length(common_met_hassan_ccle), initial = 0, style = 3) 
for(i in common_met_hassan_ccle){
  metabolite <- metab_ccle_inv[,i]
  
  model<-cv.glmnet(genes_ccle_inv,metabolite,alpha=1)
  
  #plot(model)
  
  # Get the best model
  bestcv<-which(model$lambda==model$lambda.min)
  betas<-model$glmnet.fit$beta[,bestcv]
  intercept<-model$glmnet.fit$a0[bestcv]
  sigvars<-names(betas)[betas!=0]
  bestmodel<-betas[sigvars]
  
  # create a temporary variable which stores the response and the significant predictors only for that response
  current<- cbind(metabolite, genes_ccle_inv[,names(bestmodel)])
  
  temp_current <- colnames(current) 
  temp_current <- gsub("-", "_", temp_current) #substituting the space with underscore to remove problems in Cytoscape
  colnames(current) <- temp_current
  
  rf <-randomForest(metabolite~.,data=current, ntree=1000) 
  
  #print(rf)
  #plot(rf)
  new_genes_hassan<-genes_hassan[names(bestmodel),]
  
  temp_new_genes_hassan <- rownames(new_genes_hassan) 
  temp_new_genes_hassan <- gsub("-", "_", temp_new_genes_hassan) 
  rownames(new_genes_hassan) <- temp_new_genes_hassan
  
  pred_rf <- predict(rf, t(new_genes_hassan))
  
  if(length(pred_rf_mat_hassan) == 0){
    pred_rf_mat_hassan <- pred_rf
  }else{
    pred_rf_mat_hassan <- rbind(pred_rf_mat_hassan, pred_rf)
  }
  setTxtProgressBar(pb,match(i,common_met_hassan_ccle))
}
close(pb)
rownames(pred_rf_mat_hassan) <- common_met_hassan_ccle
save(pred_rf_mat_hassan, file="data/final_ds/rf/pred_rf_mat_hassan.rda")
load("data/final_ds/rf/pred_rf_mat_hassan.rda")

cc_thr <- 0.3
corr_outputs_hassan <- correlation(metab_hassan[common_met_hassan_ccle,], pred_rf_mat_hassan[common_met_hassan_ccle,], cc_thr)
cors_hassan_spearman <- corr_outputs_hassan[[1]]
cors_hassan_pearson <- corr_outputs_hassan[[2]]

names(cors_hassan_spearman) <- common_met_hassan_ccle
names(cors_hassan_pearson) <- common_met_hassan_ccle

significant_hassan <- corr_outputs_hassan[[3]]

length(significant_hassan) # 2/35 are significant

# Saving with different names to better magae the step in which I will compare the correlations performances of 
#  differnet tools

hassan_sp_rf <- cors_hassan_spearman
hassan_pe_rf <- cors_hassan_pearson

save(hassan_sp_rf, file = "data/final_ds/corr/hassan_sp_rf.rda")
save(hassan_pe_rf, file = "data/final_ds/corr/hassan_pe_rf.rda")

# Testing how much dist is diff from zero
shapiro.test(cors_hassan_spearman) #p-value = 0.9961 --> can use t-test
shapiro.test(cors_hassan_pearson) #p-value = 0.05645 --> can use t-test
t1_hassan <- t.test(cors_hassan_spearman, alternative = "greater") #p-value = 0.2624
t2_hassan <- t.test(cors_hassan_pearson, alternative = "greater") # p-value = 0.5795


# For thesis
png(paste0("results/figures/8_rf_pred/correlations_hassan.png"),w=2900,h=2500,res=600)
plot(density(cors_hassan_spearman),col="darkgoldenrod3",lwd=3, xlim=c(-1.8,1.8), ylim = c(0,2), 
     main = "GSE148892 correlations ditribution", xlab = "metabolite CC")
lines(density(cors_hassan_pearson), col = "brown3", lty = 3, lwd = 2)
abline(v=0,lty=2, col="gray")
mtext(paste0("Spearman p-value = ",round(t1_hassan$p.value,3),"     Pearson p-value = ",round(t2_hassan$p.value,3)))
legend("topright", legend = c("Spearman", "Pearson"), lwd = 2,
       col = c("darkgoldenrod3", "brown3"), lty = c(1,2))
dev.off()

# ZAMPIERI ####
load("data/final_ds/genes_zamp.rda")
load("data/final_ds/metab_zamp.rda")

# store common metabolites and common genes between CCLE and breast
common_met_zamp_ccle <- intersect(rownames(metab_ccle), rownames(metab_zamp))
common_genes_zamp_ccle <- intersect(rownames(genes_ccle), rownames(genes_zamp))

# Prediction function needs that the model will have as predictor features (genes) 
#  the same ones that we can find in the next genes dataset upon which we want
#  to perform prediction (so we use just genes which are in common)
new_genes_ccle <- genes_ccle[common_genes_zamp_ccle,]

metab_ccle_inv <- t(metab_ccle)
genes_ccle_inv <- t(new_genes_ccle)

pred_rf_mat_zamp <- c()
pb = txtProgressBar(min = 0, max = length(common_met_zamp_ccle), initial = 0, style = 3) 
for(i in common_met_zamp_ccle){
  metabolite <- metab_ccle_inv[,i]
  
  model<-cv.glmnet(genes_ccle_inv,metabolite,alpha=1)
  
  #plot(model)
  
  # Get the best model
  bestcv<-which(model$lambda==model$lambda.min)
  betas<-model$glmnet.fit$beta[,bestcv]
  intercept<-model$glmnet.fit$a0[bestcv]
  sigvars<-names(betas)[betas!=0]
  bestmodel<-betas[sigvars]
  
  # create a temporary variable which stores the response and the significant predictors only for that response
  current<- cbind(metabolite, genes_ccle_inv[,names(bestmodel)])
  
  temp_current <- colnames(current) 
  temp_current <- gsub("-", "_", temp_current) #substituting the space with underscore to remove problems in Cytoscape
  colnames(current) <- temp_current
  
  rf <-randomForest(metabolite~.,data=current, ntree=1000) 
  
  #print(rf)
  #plot(rf)
  new_genes_zamp<-genes_zamp[names(bestmodel),]
  
  temp_new_genes_zamp <- rownames(new_genes_zamp) 
  temp_new_genes_zamp <- gsub("-", "_", temp_new_genes_zamp) 
  rownames(new_genes_zamp) <- temp_new_genes_zamp
  
  pred_rf <- predict(rf, t(new_genes_zamp))
  
  if(length(pred_rf_mat_zamp) == 0){
    pred_rf_mat_zamp <- pred_rf
  }else{
    pred_rf_mat_zamp <- rbind(pred_rf_mat_zamp, pred_rf)
  }
  setTxtProgressBar(pb,match(i,common_met_zamp_ccle))
}
close(pb)
rownames(pred_rf_mat_zamp) <- common_met_zamp_ccle
save(pred_rf_mat_zamp, file="data/final_ds/rf/pred_rf_mat_zamp.rda")
load("data/final_ds/rf/pred_rf_mat_zamp.rda")

cc_thr <- 0.3
cors_zamp_spearman<-c()
cors_zamp_pearson<-c()
significant_zamp <- c()
for(j in common_met_zamp_ccle){
  temp_real <- c()
  temp_pred <- c()
  for(v in 1:length(metab_zamp[j,])){
    if(metab_zamp[j,v] != "NaN"){
      temp_real <- c(temp_real, metab_zamp[j,v])
      temp_pred <- c(temp_pred, pred_rf_mat_zamp[j,v])
    }
  }
  cors_zamp_spearman<-c(cors_zamp_spearman,cor(temp_real,temp_pred,method="spearman"))
  cors_zamp_pearson<-c(cors_zamp_pearson,cor(temp_real,temp_pred,method="pearson"))
  if(cors_zamp_spearman[length(cors_zamp_spearman)]>cc_thr && cors_zamp_pearson[length(cors_zamp_pearson)]>cc_thr){
    significant_zamp <- c(significant_zamp, j)
  }
}
names(cors_zamp_spearman) <- common_met_zamp_ccle
names(cors_zamp_pearson) <- common_met_zamp_ccle

length(significant_zamp) # ...however just 1/38 are > 0.3

# Saving with different names to better magae the step in which I will compare the correlations performances of 
#  differnet tools

zamp_sp_rf <- cors_zamp_spearman
zamp_pe_rf <- cors_zamp_pearson

save(zamp_sp_rf, file = "data/final_ds/corr/zamp_sp_rf.rda")
save(zamp_pe_rf, file = "data/final_ds/corr/zamp_pe_rf.rda")


# Testing how much dist is diff from zero
shapiro.test(cors_zamp_spearman) #p-value = 0.8309 --> can use t-test
shapiro.test(cors_zamp_pearson) #p-value = 0.2054 --> can use t-test
t1_zamp <- t.test(cors_zamp_spearman, alternative = "greater") #p-value = 0.1676
t2_zamp <- t.test(cors_zamp_pearson, alternative = "greater") # p-value = 0.0418


# For thesisresults/
png(paste0("results/figures/8_rf_pred/correlations_zamp.png"),w=2900,h=2500,res=600)
plot(density(cors_zamp_spearman),col="darkgoldenrod3",lwd=3, xlim=c(-1,1), ylim = c(0,3), 
     main = "GSE32474 correlations ditribution", xlab = "metabolite CC")
lines(density(cors_zamp_pearson), col = "brown3", lty = 3, lwd = 2)
abline(v=0,lty=2, col="gray")
mtext(paste0("Spearman p-value = ",round(t1_zamp$p.value,3),"     Pearson p-value = ",round(t2_zamp$p.value,3)))
legend("topleft", legend = c("Spearman", "Pearson"), lwd = 2,
       col = c("darkgoldenrod3", "brown3"), lty = c(1,2))
dev.off()
